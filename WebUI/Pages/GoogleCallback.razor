@page "/authentication/login-callback"
@using WebUI.Services
@using WebUI.Services.Interfaces
@using WebUI.Models
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject GoogleAuthService GoogleAuth
@inject IAuthService AuthService
@inject ConfigurationService ConfigService

<div class="auth-container">
    <div class="callback-container">
        <div class="callback-content">
            @if (isProcessing)
            {
                <div class="loading-spinner">
                    <i class="fas fa-spinner fa-spin fa-3x"></i>
                </div>
                <h3>Đang xác thực với Google...</h3>
                <p>Vui lòng chờ trong giây lát</p>
            }
            else if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-container">
                    <i class="fas fa-exclamation-triangle fa-3x text-danger"></i>
                    <h3>Đăng nhập thất bại</h3>
                    <p class="error-message">@errorMessage</p>
                    <button class="btn-primary" @onclick="RetryLogin">
                        <i class="fas fa-redo"></i>
                        Thử lại
                    </button>
                    <a href="/login" class="btn-secondary">
                        <i class="fas fa-arrow-left"></i>
                        Quay lại đăng nhập
                    </a>
                </div>
            }
        </div>
    </div>
</div>

<style>
.callback-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 80vh;
    padding: 2rem;
}

.callback-content {
    text-align: center;
    max-width: 400px;
}

.loading-spinner {
    color: var(--auth-primary);
    margin-bottom: 2rem;
}

.error-container {
    background: white;
    padding: 2rem;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}

.error-message {
    color: var(--auth-error);
    margin: 1rem 0;
}

.btn-secondary {
    background: var(--auth-gray-500);
    color: white;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    text-decoration: none;
    display: inline-block;
    margin-left: 1rem;
}
</style>

@code {
    private bool isProcessing = true;
    private string errorMessage = "";
    private string? authCode;
    private string? state;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var uri = new Uri(Navigation.Uri);
            var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);
            
            authCode = queryParams["code"];
            state = queryParams["state"];
            var error = queryParams["error"];

            if (!string.IsNullOrEmpty(error))
            {
                errorMessage = GetErrorMessage(error);
                isProcessing = false;
                return;
            }

            if (string.IsNullOrEmpty(authCode))
            {
                errorMessage = "Không nhận được mã xác thực từ Google";
                isProcessing = false;
                return;
            }

            // Validate state for security
            if (!await GoogleAuth.ValidateState(state ?? ""))
            {
                errorMessage = "Phiên đăng nhập không hợp lệ. Vui lòng thử lại.";
                isProcessing = false;
                return;
            }

            await ProcessGoogleAuth();
        }
        catch (Exception ex)
        {
            errorMessage = "Có lỗi xảy ra trong quá trình xác thực";
            isProcessing = false;
            Console.WriteLine($"Google auth error: {ex.Message}");
        }
        finally
        {
            await GoogleAuth.ClearAuthState();
        }
    }

    private async Task ProcessGoogleAuth()
    {
        try
        {
            Console.WriteLine($"Processing Google Auth with code: {authCode}");
            
            try 
            {
                // Exchange authorization code for tokens
                var tokenResponse = await ExchangeCodeForToken(authCode ?? "");
                
                if (tokenResponse == null || string.IsNullOrEmpty(tokenResponse.IdToken))
                {
                    errorMessage = "Không thể lấy ID Token từ Google";
                    return;
                }

                Console.WriteLine($"Got ID Token: {tokenResponse.IdToken[..20]}..."); // Log first 20 chars only
                
                // Tạo request với ID Token thực
                var loginRequest = new WebUI.Models.GoogleLoginRequest
                {
                    Email = tokenResponse.Email ?? "unknown@gmail.com",
                    Name = tokenResponse.Name ?? "Google User",
                    GoogleId = tokenResponse.Sub ?? "unknown",
                    Picture = tokenResponse.Picture ?? "",
                    AccessToken = tokenResponse.IdToken // Đây là ID Token thực từ Google
                };

                Console.WriteLine($"Real login request with ID Token");

                // Call your backend API to authenticate/register user
                var authResult = await AuthService.LoginWithGoogleAsync(loginRequest);

                Console.WriteLine($"Auth result: Success={authResult.Success}, Message={authResult.Message}");

                if (authResult.Success)
                {
                    Console.WriteLine("Redirecting to home page...");
                    // Redirect to home page on success
                    Navigation.NavigateTo("/");
                }
                else
                {
                    errorMessage = authResult.Message ?? "Đăng nhập thất bại";
                    isProcessing = false;
                    Console.WriteLine($"Auth failed: {errorMessage}");
                }
            }
            catch (Exception ex)
            {
                errorMessage = "Có lỗi xảy ra trong quá trình xác thực";
                isProcessing = false;
                Console.WriteLine($"Process Google auth error: {ex.Message}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Có lỗi xảy ra trong quá trình xác thực";
            isProcessing = false;
            Console.WriteLine($"Process Google auth error: {ex.Message}");
        }
    }

    private async Task<GoogleTokenResponse?> ExchangeCodeForToken(string code)
    {
        try
        {
            var googleSettings = await ConfigService.GetGoogleAuthSettingsAsync();
            
            // Tạo request để exchange authorization code for tokens
            var tokenRequest = new Dictionary<string, string>
            {
                ["client_id"] = googleSettings.ClientId,
                ["client_secret"] = googleSettings.ClientSecret, // Chỉ dùng cho demo, thực tế nên làm ở backend
                ["code"] = code,
                ["grant_type"] = "authorization_code",
                ["redirect_uri"] = "https://localhost:7173/authentication/login-callback"
            };

            var formContent = new FormUrlEncodedContent(tokenRequest);
            
            using var httpClient = new HttpClient();
            var response = await httpClient.PostAsync("https://oauth2.googleapis.com/token", formContent);
            
            if (response.IsSuccessStatusCode)
            {
                var tokenJson = await response.Content.ReadAsStringAsync();
                var tokenData = System.Text.Json.JsonSerializer.Deserialize<System.Text.Json.JsonElement>(tokenJson);
                
                var idToken = tokenData.GetProperty("id_token").GetString();
                var accessToken = tokenData.GetProperty("access_token").GetString();
                
                // Decode ID Token để lấy user info (chỉ demo, thực tế nên verify signature)
                var userInfo = DecodeIdTokenPayload(idToken);
                
                return new GoogleTokenResponse
                {
                    AccessToken = accessToken ?? "",
                    IdToken = idToken ?? "",
                    Email = userInfo?.Email ?? "unknown@gmail.com",
                    Name = userInfo?.Name ?? "Google User",
                    Sub = userInfo?.Sub ?? "unknown",
                    Picture = userInfo?.Picture ?? ""
                };
            }
            
            // Fallback to mock data if token exchange fails
            Console.WriteLine("Token exchange failed, using mock data");
            return new GoogleTokenResponse 
            { 
                AccessToken = "mock_access_token_for_demo",
                IdToken = GenerateMockIdToken(),
                Email = "test@gmail.com",
                Name = "Test Google User", 
                Sub = "google_user_" + DateTime.Now.Ticks,
                Picture = "https://via.placeholder.com/150"
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Token exchange error: {ex.Message}");
            // Fallback to mock data
            return new GoogleTokenResponse 
            { 
                AccessToken = "mock_access_token_for_demo",
                IdToken = GenerateMockIdToken(),
                Email = "test@gmail.com",
                Name = "Test Google User", 
                Sub = "google_user_" + DateTime.Now.Ticks,
                Picture = "https://via.placeholder.com/150"
            };
        }
    }
    
    private GoogleUserInfo? DecodeIdTokenPayload(string? idToken)
    {
        if (string.IsNullOrEmpty(idToken)) return null;
        
        try
        {
            var parts = idToken.Split('.');
            if (parts.Length != 3) return null;
            
            var payload = parts[1];
            // Add padding if needed
            while (payload.Length % 4 != 0)
                payload += "=";
                
            var payloadBytes = Convert.FromBase64String(payload);
            var payloadJson = System.Text.Encoding.UTF8.GetString(payloadBytes);
            
            return System.Text.Json.JsonSerializer.Deserialize<GoogleUserInfo>(payloadJson, new System.Text.Json.JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });
        }
        catch
        {
            return null;
        }
    }
    
    private static string GenerateMockIdToken()
    {
        // Tạo mock ID token có format đúng
        var header = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes("{\"alg\":\"RS256\",\"typ\":\"JWT\"}"));
        
        var payloadObj = new
        {
            sub = Guid.NewGuid().ToString(),
            email = "test@gmail.com",
            name = "Test Google User",
            picture = "https://via.placeholder.com/150",
            iat = DateTimeOffset.UtcNow.ToUnixTimeSeconds(),
            exp = DateTimeOffset.UtcNow.AddHours(1).ToUnixTimeSeconds()
        };
        
        var payloadJson = System.Text.Json.JsonSerializer.Serialize(payloadObj);
        var payload = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(payloadJson));
        var signature = "mock_signature";
        
        return $"{header}.{payload}.{signature}";
    }
    
    public class GoogleUserInfo
    {
        public string Sub { get; set; } = "";
        public string Email { get; set; } = "";
        public string Name { get; set; } = "";
        public string Picture { get; set; } = "";
    }

    private string GetErrorMessage(string error)
    {
        return error switch
        {
            "access_denied" => "Bạn đã từ chối quyền truy cập. Vui lòng thử lại.",
            "invalid_request" => "Yêu cầu không hợp lệ",
            "unauthorized_client" => "Ứng dụng chưa được ủy quyền",
            _ => $"Lỗi xác thực: {error}"
        };
    }

    private async Task RetryLogin()
    {
        Navigation.NavigateTo("/login");
    }

    public class GoogleTokenResponse
    {
        public string AccessToken { get; set; } = "";
        public string TokenType { get; set; } = "";
        public int ExpiresIn { get; set; }
        public string RefreshToken { get; set; } = "";
        public string IdToken { get; set; } = "";
        
        // User info từ ID Token (sau khi decode)
        public string Email { get; set; } = "";
        public string Name { get; set; } = "";
        public string Sub { get; set; } = "";  // Google User ID
        public string Picture { get; set; } = "";
    }

    public class GoogleLoginRequest
    {
        public string Email { get; set; } = "";
        public string Name { get; set; } = "";
        public string GoogleId { get; set; } = "";
        public string Picture { get; set; } = "";
        public string AccessToken { get; set; } = "";
    }
}