@using WebUI.Models

<!-- Product Details Component -->
<div class="product-details">
    <!-- Product Name & Brand -->
    <div class="product-header">
        <div class="product-brand">@Product.Brand</div>
        <h1 class="product-name">@Product.Name</h1>
    </div>

    <!-- Product Rating -->
    <div class="product-rating">
        <div class="rating-stars">
            @for (int i = 1; i <= 5; i++)
            {
                <i class="fas fa-star @(i <= Product.Rating ? "filled" : "")"></i>
            }
        </div>
        <span class="rating-text">@Product.Rating.ToString("F1") (@Product.ReviewCount reviews)</span>
        <a href="#reviews" class="rating-link">See all reviews</a>
    </div>

    <!-- Product Price -->
    <div class="product-pricing">
        <div class="price-main">
            <span class="current-price">@Product.PriceFormatted</span>
            @if (Product.OriginalPrice.HasValue)
            {
                <span class="old-price">@Product.OldPriceFormatted</span>
            }
            @if (Product.HasDiscount)
            {
                <span class="discount-badge">@Product.Discount</span>
            }
        </div>
        @if (Product.HasDiscount)
        {
            <div class="savings-info">
                <i class="fas fa-tag"></i>
                <span>You save: @GetSavingsAmount()</span>
            </div>
        }
    </div>

    <!-- Product Short Description -->
    <div class="product-description">
        <p>@GetShortDescription()</p>
    </div>

    <!-- Product Options (Size, Color, etc.) -->
    <div class="product-options">
        <!-- Size Selection -->
        <div class="option-group">
            <label class="option-label">Size:</label>
            <div class="size-options">
                @foreach (var size in AvailableSizes)
                {
                    <button class="size-btn @(SelectedSize == size ? "selected" : "")"
                            @onclick="async () => await SelectSize(size)">
                        @size
                    </button>
                }
            </div>
            <a href="#size-guide" class="size-guide-link">Size Guide</a>
        </div>

        <!-- Color Selection -->
        <div class="option-group">
            <label class="option-label">Color:</label>
            <div class="color-options">
                @foreach (var color in AvailableColors)
                {
                    <button class="color-btn @(SelectedColor == color.Name ? "selected" : "")"
                            style="background-color: @color.Value"
                            title="@color.Name"
                            @onclick="async () => await SelectColor(color.Name)">
                    </button>
                }
            </div>
        </div>
    </div>

    <!-- Quantity & Stock -->
    <div class="quantity-stock-section">
        <div class="quantity-selector">
            <label class="quantity-label">Quantity:</label>
            <div class="quantity-controls">
                <button class="qty-btn minus" @onclick="DecreaseQuantity" disabled="@(Quantity <= 1)">
                    <i class="fas fa-minus"></i>
                </button>
                <input type="number" @bind="Quantity" @bind:event="oninput" 
                       @onchange="OnQuantityInputChanged"
                       min="1" max="@MaxQuantity" class="qty-input" />
                <button class="qty-btn plus" @onclick="IncreaseQuantity" disabled="@(Quantity >= MaxQuantity)">
                    <i class="fas fa-plus"></i>
                </button>
            </div>
        </div>
        
        <div class="stock-info">
            @if (StockQuantity > 0)
            {
                <span class="stock-available">
                    <i class="fas fa-check-circle"></i>
                    @StockQuantity in stock
                </span>
            }
            else
            {
                <span class="stock-out">
                    <i class="fas fa-times-circle"></i>
                    Out of stock
                </span>
            }
        </div>
    </div>

    <!-- Action Buttons -->
    <div class="product-actions">
        <button class="btn-add-cart @(StockQuantity == 0 ? "disabled" : "")"
                @onclick="HandleAddToCart"
                disabled="@(StockQuantity == 0)">
            <i class="fas fa-cart-plus"></i>
            <span>Add to Cart</span>
        </button>
        
        <button class="btn-buy-now @(StockQuantity == 0 ? "disabled" : "")"
                @onclick="HandleBuyNow"
                disabled="@(StockQuantity == 0)">
            <i class="fas fa-bolt"></i>
            <span>Buy Now</span>
        </button>
        
        <button class="btn-wishlist @(IsInWishlist ? "active" : "")"
                @onclick="ToggleWishlist"
                title="@(IsInWishlist ? "Remove from Wishlist" : "Add to Wishlist")">
            <i class="@(IsInWishlist ? "fas" : "far") fa-heart"></i>
        </button>
    </div>

    <!-- Product Features -->
    <div class="product-features">
        <div class="feature-item">
            <i class="fas fa-truck"></i>
            <div class="feature-text">
                <span class="feature-title">Free Delivery</span>
                <span class="feature-desc">On orders over $50</span>
            </div>
        </div>
        <div class="feature-item">
            <i class="fas fa-undo"></i>
            <div class="feature-text">
                <span class="feature-title">Easy Returns</span>
                <span class="feature-desc">30-day return policy</span>
            </div>
        </div>
        <div class="feature-item">
            <i class="fas fa-shield-alt"></i>
            <div class="feature-text">
                <span class="feature-title">Warranty</span>
                <span class="feature-desc">1-year warranty included</span>
            </div>
        </div>
        <div class="feature-item">
            <i class="fas fa-headset"></i>
            <div class="feature-text">
                <span class="feature-title">24/7 Support</span>
                <span class="feature-desc">Customer service</span>
            </div>
        </div>
    </div>

    <!-- Social Share -->
    <div class="social-share">
        <span class="share-label">Share:</span>
        <div class="share-buttons">
            <button class="share-btn facebook" @onclick='() => ShareProduct("facebook")' title="Share on Facebook">
                <i class="fab fa-facebook-f"></i>
            </button>
            <button class="share-btn twitter" @onclick='() => ShareProduct("twitter")' title="Share on Twitter">
                <i class="fab fa-twitter"></i>
            </button>
            <button class="share-btn pinterest" @onclick='() => ShareProduct("pinterest")' title="Share on Pinterest">
                <i class="fab fa-pinterest"></i>
            </button>
            <button class="share-btn copy" @onclick="CopyProductLink" title="Copy Link">
                <i class="fas fa-link"></i>
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter] public Product Product { get; set; } = new();
    [Parameter] public EventCallback<int> OnQuantityChanged { get; set; }
    [Parameter] public EventCallback OnAddToCart { get; set; }
    [Parameter] public EventCallback OnBuyNow { get; set; }
    [Parameter] public EventCallback<string> OnSizeChanged { get; set; }
    [Parameter] public EventCallback<string> OnColorChanged { get; set; }
    
    // Parameters for initial values from parent
    [Parameter] public int InitialQuantity { get; set; } = 1;
    [Parameter] public string InitialSize { get; set; } = "";
    [Parameter] public string InitialColor { get; set; } = "";

    // Component State
    private int Quantity { get; set; } = 1;
    private string SelectedSize { get; set; } = "";
    private string SelectedColor { get; set; } = "";
    private bool IsInWishlist { get; set; } = false;

    // Product Data
    private decimal ProductRating { get; set; } = 4.5m;
    private int ReviewCount { get; set; } = 128;
    private int StockQuantity { get; set; } = 25;
    private int MaxQuantity { get; set; } = 10;

    // Available Options
    private List<string> AvailableSizes { get; set; } = new() { "38", "39", "40", "41", "42", "43", "44", "45" };
    private List<(string Name, string Value)> AvailableColors { get; set; } = new();

    protected override void OnParametersSet()
    {
        if (Product != null && !string.IsNullOrEmpty(Product.Name))
        {
            // Initialize from Product data
            AvailableSizes = Product.Sizes ?? new List<string>();
            AvailableColors = (Product.Colors ?? new List<string>())
                .Select(c => (GetColorName(c), c))
                .ToList();
            StockQuantity = Product.StockQuantity;
            
            // Initialize with parent's values or defaults
            Quantity = InitialQuantity > 0 ? InitialQuantity : 1;
            SelectedSize = !string.IsNullOrEmpty(InitialSize) ? InitialSize : (AvailableSizes.FirstOrDefault() ?? "");
            SelectedColor = !string.IsNullOrEmpty(InitialColor) ? InitialColor : (AvailableColors.FirstOrDefault().Value ?? "");
        }
    }

    private string GetShortDescription()
    {
        return Product.Description;
    }

    private string GetSavingsAmount()
    {
        if (Product.OriginalPrice.HasValue)
        {
            var savings = Product.OriginalPrice.Value - Product.Price;
            return savings.ToString("N0") + "Ä‘";
        }
        return "";
    }

    private async Task SelectSize(string size)
    {
        SelectedSize = size;
        await OnSizeChanged.InvokeAsync(size);
        StateHasChanged();
    }

    private async Task SelectColor(string color)
    {
        SelectedColor = color;
        await OnColorChanged.InvokeAsync(color);
        StateHasChanged();
    }

    private async Task IncreaseQuantity()
    {
        if (Quantity < MaxQuantity)
        {
            Quantity++;
            await OnQuantityChanged.InvokeAsync(Quantity);
        }
    }

    private async Task DecreaseQuantity()
    {
        if (Quantity > 1)
        {
            Quantity--;
            await OnQuantityChanged.InvokeAsync(Quantity);
        }
    }

    private async Task OnQuantityInputChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newQuantity))
        {
            if (newQuantity >= 1 && newQuantity <= MaxQuantity)
            {
                Quantity = newQuantity;
                await OnQuantityChanged.InvokeAsync(Quantity);
            }
        }
    }

    private async Task HandleAddToCart()
    {
        await OnAddToCart.InvokeAsync();
    }

    private async Task HandleBuyNow()
    {
        await OnBuyNow.InvokeAsync();
    }

    private void ToggleWishlist()
    {
        IsInWishlist = !IsInWishlist;
        StateHasChanged();
    }

    private void ShareProduct(string platform)
    {
        // Implement social sharing logic
        Console.WriteLine($"Sharing on {platform}");
    }

    private async Task CopyProductLink()
    {
        // Copy current URL to clipboard
        var url = "https://abc-mart.com/product/" + Product.Name.Replace(" ", "-").ToLower();
        Console.WriteLine($"Copied link: {url}");
    }

    private string GetColorName(string colorHex)
    {
        return colorHex switch
        {
            "#000000" => "Black",
            "#FFFFFF" => "White", 
            "#FF0000" => "Red",
            "#0066CC" => "Blue",
            "#4169E1" => "Royal Blue",
            "#708090" => "Slate Gray",
            "#000080" => "Navy",
            _ => "Color"
        };
    }
}